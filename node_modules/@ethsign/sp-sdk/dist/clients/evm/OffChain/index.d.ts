import { SignType } from '../../../types';
import { OffChainClientBase } from '../../../interface/OffChainClientBase';
import { PrivateKeyAccount, PublicClient, WalletClient } from 'viem';
import { OffChainRpc } from '../../../types/offChain';
export declare class OffChainClient extends OffChainClientBase {
    rpc: OffChainRpc | string;
    walletClient: WalletClient;
    publicClient: PublicClient;
    privateKeyAccount?: PrivateKeyAccount;
    chain: any;
    account: {
        address: `0x${string}`;
    };
    constructor({ signType, rpcUrl: rpc, account: privateKeyAccount, walletClient, }: {
        signType: SignType;
        rpcUrl?: OffChainRpc | string;
        account?: PrivateKeyAccount;
        walletClient?: WalletClient;
    });
    getAccount(): Promise<PrivateKeyAccount>;
    signTypedData({ message, types, primaryType, }: {
        message: {
            [key: string]: any;
        };
        types: {
            [key: string]: {
                name: string;
                type: string;
            }[];
        };
        primaryType: string;
    }): Promise<{
        message: any;
        signature: string;
    }>;
    signMessage(message: string): Promise<string>;
}
