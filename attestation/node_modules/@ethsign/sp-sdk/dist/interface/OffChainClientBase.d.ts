import { PrivateKeyAccount } from 'viem';
import { SignProtocolClientBase } from './SignProtocolClientBase';
import { OffChainRpc } from '../types/offChain';
import { Attestation, AttestationResult, ChainType, RevokeAttestationResult, Schema, SchemaResult, SignType } from '../types';
export declare abstract class OffChainClientBase implements SignProtocolClientBase {
    rpc: OffChainRpc | string;
    chainType: ChainType;
    signType: SignType;
    constructor(chainType: ChainType, signType: SignType, rpc: OffChainRpc | string);
    revokeAttestation(attestationId: string, options?: {
        reason?: string | undefined;
    }): Promise<RevokeAttestationResult>;
    abstract getAccount(): Promise<PrivateKeyAccount>;
    abstract signTypedData(data: {
        message: {
            [key: string]: any;
        };
        types: {
            [key: string]: {
                name: string;
                type: string;
            }[];
        };
        primaryType: string;
    }): Promise<{
        message: any;
        signature: string;
    }>;
    abstract signMessage(message: string): Promise<string>;
    createSchema(schema: Schema): Promise<SchemaResult>;
    getSchema(schemaId: string): Promise<Schema>;
    createAttestation(attestation: Attestation): Promise<AttestationResult>;
    getAttestation(attestationId: string): Promise<Attestation>;
}
