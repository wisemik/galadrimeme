import { PrivateKeyAccount, PublicClient, ReadContractReturnType, WalletClient, WriteContractReturnType } from 'viem';
import { Attestation, AttestationResult, ContractInfo, CreateAttestationOnChainOptions, OnChainAttestation, OnChainClientOptions, OnChainSchema, RevokeAttestationResult, Schema, SchemaResult } from '../../../types';
import { SignProtocolClientBase } from '../../../interface/SignProtocolClientBase';
export declare class OnChainClient implements SignProtocolClientBase {
    walletClient: WalletClient;
    publicClient: PublicClient;
    contractInfo: ContractInfo;
    privateKeyAccount?: PrivateKeyAccount;
    chain: any;
    account: {
        address: `0x${string}`;
    };
    constructor({ chain: chainType, rpcUrl: rpc, account: privateKeyAccount, walletClient, }: OnChainClientOptions);
    signMessage(message: string): Promise<`0x${string}`>;
    swithChain(): Promise<void>;
    getAccount(): Promise<PrivateKeyAccount>;
    invokeContractRead(functionName: string, args?: any[]): Promise<ReadContractReturnType>;
    invokeContractWrite(functionName: string, args?: any[], value?: bigint, abi?: any): Promise<WriteContractReturnType>;
    createSchema(schema: OnChainSchema, options?: {
        delegationSignature?: string;
        getTxHash?: (txHash: `0x${string}`) => void;
    }): Promise<SchemaResult>;
    getSchema(schemaId: string): Promise<Schema>;
    revokeAttestation(attestationId: string, options?: {
        reason?: string;
        delegationSignature?: string;
        getTxHash?: (txHash: `0x${string}`) => void;
    }): Promise<RevokeAttestationResult>;
    createAttestation(attestation: OnChainAttestation, options?: CreateAttestationOnChainOptions): Promise<AttestationResult>;
    getAttestation(attestationId: string): Promise<Attestation>;
}
